// Generated by CoffeeScript 1.6.2
(function() {
  var HALF_PI, MOZIAC_RATE, PI, SoundDot, THREEHALVES_PI, TWO_PI, World;

  PI = Math.PI;

  TWO_PI = 2 * Math.PI;

  HALF_PI = Math.PI / 2;

  THREEHALVES_PI = 3 * Math.PI / 2;

  MOZIAC_RATE = .614;

  SoundDot = (function() {
    function SoundDot(radius, center, angle, rate) {
      this.radius = radius;
      this.center = center;
      this.angle = angle != null ? angle : HALF_PI;
      this.rate = rate != null ? rate : .2;
      this.START_ANGLE = this.angle;
      this.circumference = TWO_PI * this.radius;
      this.centerY = this.center.y;
      this.centerX = this.center.x;
      this.color = {
        red: 0,
        green: 0,
        blue: 0
      };
    }

    SoundDot.prototype.calculatePosition = function() {
      this.y = this.centerY - this.radius * Math.sin(this.angle);
      return this.x = this.centerX + this.radius * Math.cos(this.angle);
    };

    SoundDot.prototype.update = function(ellapsedTime) {
      var angle, colorChange, dist;

      dist = this.rate * ellapsedTime;
      angle = TWO_PI * dist / this.circumference;
      this.angle += angle;
      this.calculatePosition();
      colorChange = angle / TWO_PI * 255;
      this.color.blue += colorChange;
      if (this.checkWrapAround()) {
        this.color.blue = 0;
        this.color.green += 16;
        if (this.color.green > 255) {
          this.color.green = 0;
          this.color.red += 16;
          if (this.color.red > 255) {
            return this.color.red = 0;
          }
        }
      }
    };

    SoundDot.prototype.checkWrapAround = function() {
      if (this.angle > this.START_ANGLE) {
        this.angle -= TWO_PI;
        return true;
      } else {
        return false;
      }
    };

    SoundDot.prototype.render = function(graphics) {
      var color;

      color = "rgb(" + this.color.red + ", " + this.color.green + ", " + (Math.floor(this.color.blue)) + ")";
      graphics.beginPath();
      graphics.fillStyle = color;
      graphics.strokeStyle = color;
      graphics.arc(this.x, this.y, 3, 0, TWO_PI, false);
      graphics.fill();
      graphics.stroke();
      return graphics.closePath();
    };

    SoundDot.prototype.playSound = function() {};

    return SoundDot;

  })();

  World = (function() {
    function World(width, height) {
      this.width = width;
      this.height = height;
      this.dots = [];
    }

    World.prototype.initialize = function() {
      var center, i, radius, _i, _results;

      center = {
        x: this.width / 2,
        y: this.height / 2
      };
      _results = [];
      for (i = _i = 1; _i <= 100; i = ++_i) {
        radius = 5 * i;
        this.dots.push(new SoundDot(radius, center, 0));
        this.dots.push(new SoundDot(radius, center, TWO_PI / 3));
        this.dots.push(new SoundDot(radius, center, TWO_PI / 3 * 2));
        this.dots.push(new SoundDot(radius, center, 0 + TWO_PI / 6));
        this.dots.push(new SoundDot(radius, center, TWO_PI / 3 + TWO_PI / 6));
        _results.push(this.dots.push(new SoundDot(radius, center, TWO_PI / 3 * 2 + TWO_PI / 6)));
      }
      return _results;
    };

    World.prototype.update = function(ellapsedTime) {
      var dot, _i, _len, _ref, _results;

      _ref = this.dots;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dot = _ref[_i];
        _results.push(dot.update(ellapsedTime));
      }
      return _results;
    };

    World.prototype.render = function(graphics) {
      var dot, _i, _len, _ref, _results;

      graphics.strokeStyle = "#000000";
      _ref = this.dots;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dot = _ref[_i];
        _results.push(dot.render(graphics));
      }
      return _results;
    };

    return World;

  })();

  $(function() {
    var canvas, clearContext, context, height, prevTime, update, width, world;

    width = window.innerWidth - 17;
    height = window.innerHeight - 17;
    $("<canvas width='" + width + "' height='" + height + "'>").appendTo(document.body);
    $('canvas').css({
      border: "1px solid black"
    });
    canvas = $('canvas')[0];
    context = canvas.getContext("2d");
    clearContext = function(context) {
      context.save();
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.clearRect(0, 0, width, height);
      return context.restore();
    };
    world = new World(width, height);
    world.initialize();
    prevTime = new Date();
    update = function() {
      var currentTime, ellapsedTime;

      currentTime = new Date();
      ellapsedTime = currentTime - prevTime;
      prevTime = currentTime;
      world.update(ellapsedTime);
      clearContext(context);
      return world.render(context);
    };
    return window.setInterval(update, 33);
  });

}).call(this);
